services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ghostwriter
      POSTGRES_PASSWORD: password
      POSTGRES_DB: ghostwriter_qa
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ghostwriter -d ghostwriter_qa"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql+asyncpg://ghostwriter:password@postgres:5432/ghostwriter_qa
      REDIS_URL: redis://redis:6379
      SECRET_KEY: dev-secret-key-change-in-production-12345678901234567890
      OPENAI_API_KEY: ${OPENAI_API_KEY:-sk-fake-key-for-development-only}
      ENCRYPTION_KEY: oB1EDzwDbEd4KZeRsdR1uHg2uVq6w1dNvOPsVcZ-xws=
      API_ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      BACKEND_CORS_ORIGINS: '["http://localhost:3000","http://127.0.0.1:3000","http://localhost:3001","http://127.0.0.1:3001"]'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/__pycache__
      - /var/run/docker.sock:/var/run/docker.sock
    command: sh -c "uvicorn src.main:socket_app --host 0.0.0.0 --port 8000 --reload"

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql+asyncpg://ghostwriter:password@postgres:5432/ghostwriter_qa
      REDIS_URL: redis://redis:6379
      CELERY_BROKER_URL: redis://redis:6379/0
      SECRET_KEY: dev-secret-key-change-in-production-12345678901234567890
      OPENAI_API_KEY: ${OPENAI_API_KEY:-sk-fake-key-for-development-only}
      ENCRYPTION_KEY: oB1EDzwDbEd4KZeRsdR1uHg2uVq6w1dNvOPsVcZ-xws=
      PYTHONPATH: /app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/__pycache__
    command: celery -A src.core.celery_app:celery_app worker --loglevel=info

  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5555:5555"
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
    depends_on:
      - celery
    command: celery -A src.core.celery_app:celery_app flower

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DOCKER_ENV=true
    depends_on:
      - backend

volumes:
  postgres_data:
  redis_data: